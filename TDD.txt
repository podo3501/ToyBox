테스트 코드 쪽에 개선사항이나 나중에 고쳐야 할 사항을 적어놓는 것도 좋은 방법일 것 같다.

EXPECT_TRUE 같은 검증용 예약어 같은 경우는 그 파일내에서만 사용하고 fixture나 다른 함수에서 사용하는건
나중에 가독성의 문제가 생길 가능성이 있다. 한군데로 모으면 코드량이 줄긴 한데 보기가 어렵고 따라가야 
하는데 테스트의 특성상 테스트 코드를 함수따라 분석하고 있으면 쉽게 피로해지기 때문이다.

테스트와 실제 코드파일을 1:1로 매칭 했을때의 이점은, 테스트 코드는 명확성을 위해서 길게 만드는 것이 허용
된다는 것이다. 1:1로 매칭 하지 않고 fixture를 한군데 몰아 넣고 임의의 cpp로 다량의 테스트를 진행하는 경우
테스트가 긴것이 싫어지기 때문에 시나리오 테스트를 대부분 하게 되는데, 이때 코드의 가독성이 현저히 떨어지
게 된다. 특히나 테스트 코드의 경우 하드 코딩된 것들이 많은데 하드 코딩된 코드를 몇십줄 계속 보면 짜증이 올
라오기 때문이다. 테스트 코드는 짧게 딱 필요한 만큼만 보여주고 바로바로 인식 가능한 수준이어야 만들때도
부담없고 볼때도 부담없다. 테스트 코드는 보기 위해서 존재하는 것이기 때문에 책임이 간결하면서 명확하게,
추적이 쉽게, 실패가 되었을때 바로 가능해야 한다. 테스트 코드를 들여다 보는 시점은 작성하고나서 몇주, 몇달
뒤가 될텐데, 이때 실제 코드를 보는 것도 짜증나는데 테스트 코드를 분석해야 한다는 그 부담감이 tdd를 멀어지
게 하는 것이다. 그래서 시나리오 테스트는 꼭 필요한 것만, 최대한 짧은 흐름으로 해야 한다.

테스트 코드내 cpp에서는 주석을 적극적으로 사용하자. 여기는 테스트 하는 코드이기도 하지만, 기술문서의
성격도 같이 가지고 있기 때문에, 주석을 기피할 필요가 없다.

테스트 코드 내에 헬퍼 함수가 길어지면 이 코드를 분석하게 된다. 그러면 tdd의 본질에 반하는 것이기 때문에
tdd 코드는 은닉이 되는 함수를 만들지 말고, 표현되는 함수를 만들어야 한다. 예를들어, 
SimulateClick(button); 
이것은 클릭을 하는 것, 3번의 행동이 들어가 있지만 함수의 이름을 보고 3번의 행동이 있을 것임을 예측가능하다.
AttachTwoComponents(root, childA, childB);
이것은 두개의 컴포넌트가 어떻게 붙었는지, 또 위치가 어떻게 되는지, 어떤 정렬인지 등등을 알아야 한다면
이 함수를 열어보아야 한다. tdd 코드는 읽는 행위에 중점을 두고 있기 때문에 이렇게 함수를 '열어'보아야 한다
면 이 tdd 헬퍼함수는 잘못 만들어진 함수다.
레거시 코드에서는 은닉과 표현 둘다를 써서 코딩하지만, tdd 코드에서는 표현 코딩만 사용하자.
(표현코딩의 간단한 예시라면 한두줄짜리 인라인 같은 거라고 봐도 무방하다.)