CreateWICTextureFromFile안에 GetWIC함수가 InitOnceExecuteOnce로 Factory를 생성하는데 싱글톤 패턴
을 쓰기 때문에 Test가 독립적으로 작동하지 못한다. 예를들면 1번 테스트에서 static 변수에 2를 넣고 2번
테스트에서 그 값을 읽으면 초기화가 안 되어서 기대한 값이 아니라 2라는 값이 나오는 것처럼 static 변수
를 초기화 해야 하는 일이 생겼다. 그래서 WICTextureLoader.h와 cpp를 수정해서 static 변수를 초기화 하는
WICOnceInitialize함수를 추가했다.

google test(gmock)에서 pch를 사용하는 방법.
NuGet에서 gmock 패키지를 받아서 설치 했을때 .cc파일이 프로젝트에 합류됨으로써 컴파일을 하면 .pch
파일을 include 하라고 나오는데 google test가 ms 전용이 아니기 때문에 pch(pre compile header)를 적
용시킬수는 없기 때문이다. cmake를 사용하면 gmock과 gtest프로젝트등 여러개가 만들어지는데 이렇게
하면 아마 pch를 사용할 수 있을 것이다. 내가 한 방법은 깃허브에서 코드를 다운 받은후 빈 프로젝트를 
만들어서 .cc 파일 (gmock-all, gtest-all 두개만 컴파일 하면 된다. 왜냐면 다른 .cc파일을 all 파일이 다 인
클루드 하기 때문이다)을 추가한후, 빌드한다. 이 프로젝트는 GoogleTestLib로 만들었으며, 컴파일 하고
나면 lib가 만들어진다. 그리고 만들어진 프로젝트(lib)를 Test 프로젝트(ToyTest)에서 참조했다. Test 프로
젝트는 만들때 google test 프로젝트로 만든후 NuGet에서 설치돼 있는 gtest를 삭제한다. 왜냐면 google 
mock이 포함되어 있지 않아서이다. 그리고 main을 작성해 준다.
--------------요약--------------
1. 빈 프로젝트 GoogletTestLib 만들기
2. google test GitHub에서 다운받아서 cc파일 두개 추가
3. include 폴더 디렉토리 설정하기
4. 컴파일 되는지 확인
5. 새프로젝트 만들기 해서 google test 프로젝트로 프로젝트 만들기
6. NuGet에서 설치되어 있는 기본 gtest를 삭제
6. GoogletTestLib을 참조로 연결
7. main함수 작성

message에서 PostQuitMessage 메세지가 남아있어서 다음 테스트에 영향을 미치는듯 하다.
Destroy함수가 불리면 WM_DESTROY를 부르고 거기서 WM_QUIT메세지가 큐에 담긴다. 이 메세지는 다
음 테스트에 작동되면서 테스트 종료를 일으킨다. 끝낼때에는 Message Queue의 내용을 지워서 테스트
가 독립적이게 만들어야 한다. 

Microsoft::WRL::Wrappers::RoInitializeWrapper initialize(RO_INIT_MULTITHREADED);
이 함수를 리팩토링으로 다른 함수로 옮겼더니 멀티쓰레드 적용이 되지 않았다.  RAII를 사용하기 때문에
함수가 끝나면 사라진다. 사라지기 전에 com을 생성해야 하기 때문이다.

한 클래스에 unique_ptr 변수가 2개 있으면 선언 순서의 역순으로 소멸자가 호출된다.

1>D:\ProgrammingStudy\ToyBox\Toy\Button3.cpp(36,43): warning C4100: 'iter': 참조되지 않은 정식 매개 변수입니다.
1>(소스 파일 '/Button3.cpp'을(를) 컴파일하는 중)
1>    D:\ProgrammingStudy\ToyBox\Toy\Button3.cpp(36,43):
1>    템플릿 인스턴스화 컨텍스트(가장 오래된 인스턴스화 컨텍스트)가
1>        D:\ProgrammingStudy\ToyBox\Toy\Button3.cpp(36,15):
1>        클래스 템플릿 멤버 함수 'std::ranges::in_fun_result<conditional<std::ranges::borrowed_range<_Rng>,unknown-type,std::ranges::dangling>::type,_Fn> std::ranges::_For_each_fn::operator ()(_Rng &&,_Fn,_Pj) const'을(를) 컴파일하는 중입니다.
1>        C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\algorithm(488,13):
1>        'indirectly_unary_invocable<`Button3::LoadResources'::`2'::<lambda_1>,std::_Projected_impl<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum Button3::ButtonState const ,ButtonImage> > > >,std::identity>::_Type>' 개념을 평가하는 동안
1>        C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xutility(964,60):
1>        'invocable<`Button3::LoadResources'::`2'::<lambda_1> &,std::pair<enum Button3::ButtonState const ,ButtonImage> &>' 개념을 평가하는 동안
1>        C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\concepts(262,10):
1>        컴파일되는 함수 템플릿 인스턴스화 'unknown-type std::invoke(_Callable &&,_Ty1 &&,_Types2 ...) noexcept(<expr>)'에 대한 참조를 확인하세요.
1>        C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(1711,45):
1>        클래스 템플릿 멤버 함수 'unknown-type std::_Invoker_functor::_Call(_Callable &&,_Types ...) noexcept(<expr>)'을(를) 컴파일하는 중입니다.
1>        C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(1610,46):
1>        컴파일되는 함수 템플릿 인스턴스화 'void Button3::LoadResources::<lambda_1>::operator ()<std::pair<const Button3::ButtonState,ButtonImage>>(_T2 &) const'에 대한 참조를 확인하세요.
1>        with
1>        [
1>            _T2=std::pair<const Button3::ButtonState,ButtonImage>
1>        ]
빌드창에 이렇게 떳길래 보니까 '오류'가 아니라 '경고'였다. w4에서 w3로 경고 수준을 낮추면 사라진다.
iter라는 변수를 사용하지 않아서 나오는 경고치고는 너무 살벌하다.

렌더링 할 객체들의 데이터를 확인하려면 렌더러를 인자로 넣어야 한다.
그런데 렌더러를 인자로 넣지 못하는 경우가 생긴다. barrier같은것이 있을경우 콜백으로 받아서 처리해야 하기
때문이다. 그래서 콜백 함수와 랜더러를 인자로 하는 함수 2개를 만들어서 테스트 할 수 있게끔 한다.

unique_ptr은 pImpl을 쓰고 싶게(전방선언을 하고싶게) 만드는데 여기서 문제점은
unique_ptr은 raw포인터와 같아서 delete방식을 알고 있어야 한다. 즉 소멸자가 정의되지 않으면
오류 C2027 정의되지 않은 형식 '클래스명'을(를) 사용했습니다. 라고 나온다.
그러면 소멸자를 cpp에서 정의해 주면 되긴한데 문제는 생성자가 template인 경우는 이게 또 말썽이다
그래서 template 생성자를 cpp에 명시적으로 선언해 주거나 아니면 중요한 게 아닐 경우는 생성자에 
template를 안 쓰는게 좋은 것 같다.  그리고 에러 메세지가 꼭 저렇게 안나오고 애매하게 나오는 경우도
있으니 주의를 요함
생성자 소멸자 둘다 cpp에 정의한다. h에 = default 해도 소용없음 
*변수를 h에 선언할때 초기화 할수 있는데 초기화를 하면 cpp에 정의해도 필요없게 됨. 선언과 동시에 초기화를
하지 않아야 함.ex) std::unique_ptr<Material> m_materials{ nullptr }; <-- m_materials{ nullptr } 중괄호 없애야함.
그 클래스를 부르는 상위 클래스에도 생성자, 소멸자를 cpp에서 = default 같은 걸로 정의해 주어야 한다.

Google Test에서 SEH 예외가 발생한다는 것은 테스트 실행 중에 시스템 오류(예: 잘못된 메모리 접근, NULL 포인
터 참조 등)가 발생했음을 의미함. 코드중에 어떤 포인터가 잘못됐는지를 잘 찾아보자. 예를들면 unique_ptr로
만들고 나서 scope가 지나서 자동으로 사라진지 모르고 거기다가 셋팅한다던지 등등.

ttf폰트에서 spritefont로 바꿀때 한글 및 기호, 영어를 넣어서 뽑는 옵션
MakeSpriteFont "맑은 고딕" MaleunGothicS16.spritefont /FontSize:16 /CharacterRegion:0xAC00-0xD7A3 /CharacterRegion:0x0020-0x007E
 /FastPack
 /CharacterRegion:0xAC00-0xD7A3 한글 추가 옵션
 /CharacterRegion:0x0020-0x007E 영어 및 기호 옵션
 그냥 옵션 없이 실행하면 한글 폰트임에도 영어와 기호 옵션만 나온다.
 /FastPack을 안하면 실행이 끝날때까지 4시간 정도 걸린다.

 DirectXTK12와 imgui를 붙일때 주의점은 example에서 보면 ImGui_ImplDX12_Init 이 함수를 호출할때 
 DXGI_FORMAT_R8G8B8A8_UNORM 으로 호출하는데 기본 DirectXTK12설정은 DXGI_FORMAT_B8G8R8A8_UNORM
 로 되어 있다. 설정을 자신의 백버퍼에 맞게 맞추어 줘야 한다. 버퍼가 2개인데 3개로 설정해도 돌아가긴 한다.
